{
  "id": "snapshot_1758957951205_tf8vnoejs",
  "approvalId": "approval_1758957951154_5yp6vkqyz",
  "approvalTitle": "engineering-knowledge-sharing design",
  "version": 1,
  "timestamp": "2025-09-27T07:25:51.205Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# engineering-knowledge-sharing 設計書\n\n## 1. 概要\nPdEエンジニア向けナレッジ共有Webサービスの設計書。RSS取り込み、コメント付き投稿、ディスカッション、Slack連携を中核としたモダンなWebアプリケーションとして設計する。\n\n## 2. コンテキスト\n- 利用ステークホルダー: PdEエンジニア、PdEマネージャー/EM\n- 既存システムとの関係: 社内SSO、Slackワークスペースとの連携\n- 技術的制約: 社内ネットワーク/VPNからのみアクセス可能\n\n## 3. 要件対応表\n| 要件ID | 設計要素 | 実装方針 |\n|--------|----------|----------|\n| REQ-002 | コメント付き投稿作成 | リッチテキストエディタ、タグ管理、Slack連携設定 |\n| REQ-003 | ディスカッションとナレッジ蓄積 | 階層コメント、@メンション、ナレッジカード化 |\n| REQ-004 | RSS取り込み | RSSフィード管理、承認フロー、自動タグ推定 |\n| REQ-005 | Slack通知 | 通知配信、ダイジェスト生成、サプレッション設定 |\n| REQ-006 | ナレッジ検索 | フルテキスト検索、フィルタリング、タグナビゲーション |\n\n## 4. システムアーキテクチャ\n- フロントエンド: React 18 + TypeScript + Vite\n- バックエンド: Node.js + Express + TypeScript\n- データベース: PostgreSQL + Prisma ORM\n- 認証: NextAuth.js (SSO連携)\n- 検索: PostgreSQL Full-Text Search + Elasticsearch (将来拡張)\n- 通知: Slack Web API + バックグラウンドジョブ\n\n### アーキテクチャパターン\n- レイヤードアーキテクチャ: Presentation → Business → Data Access\n- マイクロサービス志向: 将来的な機能拡張を考慮した疎結合設計\n- イベント駆動: 投稿・コメント・通知をイベントとして処理\n\n## 5. ドメインモデル\n### 主要エンティティ\n- User: エンジニア、マネージャー\n- Post: 投稿（記事リンク + コメント + タグ）\n- Comment: コメント（階層構造、@メンション対応）\n- Tag: タグ（人気度、関連タグ）\n- RSSFeed: RSSフィード設定\n- RSSItem: RSS記事（承認待ち/承認済み）\n- Notification: Slack通知設定\n- KnowledgeCard: 議論のまとめ\n\n## 6. ユースケース / フロー\n### 投稿作成フロー\n1. ユーザーが記事リンクを入力\n2. システムが記事メタデータを取得\n3. ユーザーがコメント・タグを追加\n4. 投稿を保存\n5. Slack通知設定を選択\n6. 通知を配信\n\n### RSS取り込みフロー\n1. 管理者がRSSフィードを登録\n2. バックグラウンドジョブが定期実行\n3. 新記事を取得・解析\n4. 自動タグ推定・サマリー生成\n5. 承認キューに追加\n6. 管理者が承認\n7. 投稿として公開\n\n## 7. UI/UX ラフ案\n### メインページ構成\n- ヘッダー: ロゴ、検索、ユーザーメニュー\n- サイドバー: タグフィルター、人気タグ\n- メインエリア: 投稿一覧（カード形式）\n- フッター: 統計情報、リンク\n\n### 投稿詳細ページ\n- 記事プレビュー + ユーザーコメント\n- タグ表示\n- コメントセクション（階層表示）\n- 関連投稿\n\n### 投稿作成ページ\n- 記事URL入力\n- リッチテキストエディタ\n- タグ選択/作成\n- Slack通知設定\n\n## 8. データ設計\n### データベーススキーマ\n```sql\n-- ユーザー\nCREATE TABLE users (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  email VARCHAR(255) UNIQUE NOT NULL,\n  name VARCHAR(255) NOT NULL,\n  role VARCHAR(50) DEFAULT 'engineer',\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- 投稿\nCREATE TABLE posts (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  user_id UUID REFERENCES users(id),\n  title VARCHAR(500) NOT NULL,\n  url TEXT NOT NULL,\n  content TEXT, -- ユーザーコメント\n  summary TEXT, -- 自動生成サマリー\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- タグ\nCREATE TABLE tags (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  name VARCHAR(100) UNIQUE NOT NULL,\n  description TEXT,\n  usage_count INTEGER DEFAULT 0,\n  created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- 投稿-タグ関連\nCREATE TABLE post_tags (\n  post_id UUID REFERENCES posts(id),\n  tag_id UUID REFERENCES tags(id),\n  PRIMARY KEY (post_id, tag_id)\n);\n\n-- コメント\nCREATE TABLE comments (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  post_id UUID REFERENCES posts(id),\n  user_id UUID REFERENCES users(id),\n  parent_id UUID REFERENCES comments(id), -- 階層構造\n  content TEXT NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- RSSフィード\nCREATE TABLE rss_feeds (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  name VARCHAR(255) NOT NULL,\n  url TEXT NOT NULL,\n  is_active BOOLEAN DEFAULT true,\n  created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- RSS記事\nCREATE TABLE rss_items (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  feed_id UUID REFERENCES rss_feeds(id),\n  title VARCHAR(500) NOT NULL,\n  url TEXT NOT NULL,\n  content TEXT,\n  summary TEXT,\n  status VARCHAR(50) DEFAULT 'pending', -- pending, approved, rejected\n  created_at TIMESTAMP DEFAULT NOW()\n);\n```\n\n## 9. インテグレーション/外部サービス\n### 社内SSO連携\n- NextAuth.js を使用したGoogle Workspace認証\n- セッション管理とロールベースアクセス制御\n\n### Slack連携\n- Slack Web API を使用した通知配信\n- チャンネル選択、メッセージフォーマット\n- バックグラウンドジョブでの定期配信\n\n### RSS取り込み\n- node-rss-parser を使用したRSS解析\n- 記事メタデータ取得（Open Graph、Twitter Cards）\n- 自動タグ推定（自然言語処理）\n\n## 10. セキュリティ・運用\n### 認証・認可\n- 社内SSO必須、セッション管理\n- ロールベースアクセス制御（エンジニア、マネージャー、管理者）\n\n### セキュリティ\n- HTTPS必須、CSRF対策\n- 入力値検証、XSS対策\n- 社内ネットワーク/VPNからのみアクセス\n\n### 運用・監視\n- アプリケーションログ、エラーログ\n- パフォーマンス監視（レスポンス時間、DB接続数）\n- バックアップ・復旧手順\n\n## 11. 非機能要件対応\n### パフォーマンス\n- データベースインデックス最適化\n- フロントエンドの遅延読み込み\n- CDN活用（静的ファイル配信）\n\n### 可用性\n- データベース接続プール\n- エラーハンドリング・リトライ機能\n- ヘルスチェックエンドポイント\n\n### スケーラビリティ\n- 水平スケーリング対応設計\n- キャッシュ戦略（Redis導入検討）\n- マイクロサービス化の準備\n\n## 12. テスト戦略\n### 単体テスト\n- ビジネスロジック、ユーティリティ関数\n- データベース操作、API エンドポイント\n\n### 統合テスト\n- 認証フロー、投稿作成フロー\n- Slack通知、RSS取り込み\n\n### エンドツーエンドテスト\n- ユーザーシナリオ（投稿→コメント→通知）\n- 管理者シナリオ（RSS管理→承認）\n\n## 13. オープンな課題\n- Elasticsearch導入タイミング（検索性能要件次第）\n- マイクロサービス化の範囲とタイミング\n- モバイルアプリ対応の必要性\n- 多言語対応（将来的な国際展開）\n",
  "fileStats": {
    "size": 7464,
    "lines": 219,
    "lastModified": "2025-09-27T07:25:48.176Z"
  },
  "comments": []
}