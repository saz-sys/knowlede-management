{
  "id": "snapshot_1758959063822_qrkjdt68j",
  "approvalId": "approval_1758958987953_cpdol0rpp",
  "approvalTitle": "engineering-knowledge-sharing tasks",
  "version": 2,
  "timestamp": "2025-09-27T07:44:23.822Z",
  "trigger": "approved",
  "status": "pending",
  "content": "# engineering-knowledge-sharing タスク分解\n\n- [ ] TASK-001 Next.js基盤とSupabaseクライアント初期化\n  - 対応要件: REQ-001, REQ-005, 非機能（認証・性能）\n  - 対応ファイル/モジュール: `package.json`, `next.config.js`, `app/layout.tsx`, `lib/supabase/client.ts`, `lib/config/env.ts`\n  - 作業内容:\n    - Next.js 14 (App Router) プロジェクトを初期化し、TypeScript/Tailwind構成を整備\n    - Supabase JS SDK と環境変数ロードユーティリティをセットアップ\n    - アプリ共通レイアウトにSupabaseプロバイダとテーマ設定を組み込む\n  - 完了条件: 開発サーバーが起動し、Supabaseセッションを取得できること、ESLint/TypeScriptエラーがないこと\n  - _Prompt:\n    - Role: フロントエンドエンジニア（Next.js / Supabase 初期構築）\n    - Task: Implement the task for spec engineering-knowledge-sharing, first run spec-workflow-guide to get the workflow guide then implement the task: Next.js 14 + Supabaseを用いたアプリ基盤とクライアントラッパーを構築し、環境変数とUIレイアウトを整備する\n    - Restrictions: 既存設定を破壊しない、秘密情報を直書きしない、ESLint設定に従う\n    - _Leverage: `https://supabase.com/docs/guides/getting-started`, Next.js App Router ドキュメント\n    - _Requirements: REQ-001, REQ-005, 非機能（認証・性能）\n    - Success: Supabaseクライアントが型安全に初期化され、アプリ全体で使用できる\n    - Instructions: tasks.mdの当該行を開始時に`- [ ]`→`- [-]`、完了時に`- [x]`へ更新すること\n\n- [ ] TASK-002 Supabaseスキーマ定義とRLSポリシー実装\n  - 対応要件: REQ-001〜REQ-005, 非機能（セキュリティ）\n  - 対応ファイル/モジュール: `supabase/migrations/20250927_init.sql`, `supabase/seed/initial_tags.sql`, `supabase/policies/*.sql`\n  - 作業内容:\n    - posts, comments, tags, knowledge_cards, rss_feeds, rss_items, slack_channels テーブルを作成\n    - RLSポリシーでドメイン制限済みユーザーのみ読み書きできるようにする\n    - テストデータとしてサンプルタグを投入するシードを用意\n  - 完了条件: `supabase db lint` 相当の検証に通り、RLSポリシーが有効\n  - _Prompt:\n    - Role: データベースエンジニア（Supabase/Postgres設計）\n    - Task: Implement the task for spec engineering-knowledge-sharing, first run spec-workflow-guide to get the workflow guide then implement the task: SupabaseのSQLマイグレーションとRLSポリシーを追加し、要件を満たすデータモデルを構築する\n    - Restrictions: 破壊的変更を避ける、命名規約に従う、SQLコメントで意図を残す\n    - _Leverage: Supabase Migration CLI, Postgres FTSドキュメント\n    - _Requirements: REQ-001〜REQ-005, 非機能（セキュリティ）\n    - Success: マイグレーション適用後に全テーブル・ポリシーが反映され、想定クエリが動作\n    - Instructions: tasks.mdの当該行を開始時に`- [ ]`→`- [-]`、完了時に`- [x]`へ更新すること\n\n- [ ] TASK-003 Supabase Auth連携とアクセスガード\n  - 対応要件: 非機能（認証・アクセス制御）\n  - 対応ファイル/モジュール: `app/middleware.ts`, `lib/auth/server.ts`, `app/(auth)/login/page.tsx`\n  - 作業内容:\n    - Supabase Authのメールドメイン制限と招待制を前提にしたサーバーサイドガードを実装\n    - 未認証ユーザーをログイン画面へリダイレクト\n    - ログイン後のセッション検証とロール情報の提供APIを作成\n  - 完了条件: 認証済みユーザーのみダッシュボードにアクセス可能、未認証時はログイン誘導\n  - _Prompt:\n    - Role: フルスタックエンジニア（Next.js Auth）\n    - Task: Implement the task for spec engineering-knowledge-sharing, first run spec-workflow-guide to get the workflow guide then implement the task: Supabase AuthをNext.js App Routerに統合し、ゼロトラストアクセスガードを構築する\n    - Restrictions: クライアント側でシークレットを保持しない、middleware内で重い処理をしない\n    - _Leverage: `@supabase/auth-helpers-nextjs`, Next.js Middleware ドキュメント\n    - _Requirements: 非機能（認証・アクセス制御）\n    - Success: 認証フローがE2Eで動作し、保護ページへの直接アクセスが制限される\n    - Instructions: tasks.mdの当該行を開始時に`- [ ]`→`- [-]`、完了時に`- [x]`へ更新すること\n\n- [ ] TASK-004 投稿作成UIとAPIエンドポイント\n  - 対応要件: REQ-001, REQ-004\n  - 対応ファイル/モジュール: `app/(dashboard)/posts/new/page.tsx`, `components/posts/PostEditor.tsx`, `app/api/posts/route.ts`\n  - 作業内容:\n    - 記事URL入力・コメント・タグ選択・Slack通知設定を含むフォームを実装\n    - Supabaseに投稿を保存し、Slack通知キューを作成するAPIを実装\n    - 成功時に投稿一覧へ遷移、失敗時にエラー表示\n  - 完了条件: UIで投稿が作成でき、DBとSlack通知キューへ反映される\n  - _Prompt:\n    - Role: フルスタックエンジニア（React + Next.js API）\n    - Task: Implement the task for spec engineering-knowledge-sharing, first run spec-workflow-guide to get the workflow guide then implement the task: 投稿作成UIとAPIを実装し、Slack通知設定を保存する\n    - Restrictions: Form状態管理は既存hooksに合わせる、APIレスポンスで不要なデータを返さない\n    - _Leverage: `lib/supabase/client.ts`, Slack webhookユーティリティ（後続タスクで利用）\n    - _Requirements: REQ-001, REQ-004\n    - Success: 新規投稿がDBに保存され、通知設定がキューに記録される\n    - Instructions: tasks.mdの当該行を開始時に`- [ ]`→`- [-]`、完了時に`- [x]`へ更新すること\n\n- [ ] TASK-005 コメント機能とナレッジカード作成\n  - 対応要件: REQ-002\n  - 対応ファイル/モジュール: `app/api/comments/route.ts`, `components/comments/CommentThread.tsx`, `components/comments/KnowledgeCardForm.tsx`\n  - 作業内容:\n    - 階層コメントのCRUD APIを実装し、@メンション・リアクションを保存\n    - コメントツリー表示とリアクションUIを実装\n    - 投稿者/モデレーターが議論要約を作成しknowledge_cardsへ保存\n  - 完了条件: コメント作成・返信・削除・リアクションが可能、要約カードが生成できる\n  - _Prompt:\n    - Role: フロントエンドエンジニア（リアクティブUI + API連携）\n    - Task: Implement the task for spec engineering-knowledge-sharing, first run spec-workflow-guide to get the workflow guide then implement the task: コメントツリーとナレッジカード作成機能を実装する\n    - Restrictions: 冪等性を保つ、リロードなしでUIが更新されるようにする\n    - _Leverage: `lib/supabase/server-actions.ts`, React Query/UseSWRパターン（プロジェクト標準）\n    - _Requirements: REQ-002\n    - Success: コメントと要約カードがDBへ保存され、UIが即座に反映\n    - Instructions: tasks.mdの当該行を開始時に`- [ ]`→`- [-]`、完了時に`- [x]`へ更新すること\n\n- [ ] TASK-006 検索・タグナビゲーション機能\n  - 対応要件: REQ-005\n  - 対応ファイル/モジュール: `app/(dashboard)/search/page.tsx`, `app/api/search/route.ts`, `components/search/TagFilter.tsx`\n  - 作業内容:\n    - Postgres FTSを利用した全文検索APIを実装\n    - タグ・投稿者・期間フィルタをUIに実装し、人気タグ/関連タグを表示\n    - レスポンスをキャッシュ（Supabase cache）して性能を確保\n  - 完了条件: 検索が1秒以内（p90）で返り、複数フィルタを組み合わせても動作\n  - _Prompt:\n    - Role: フルスタックエンジニア（検索体験）\n    - Task: Implement the task for spec engineering-knowledge-sharing, first run spec-workflow-guide to get the workflow guide then implement the task: フルテキスト検索APIと検索UIを実装し、タグナビゲーションを提供する\n    - Restrictions: N+1クエリを避ける、不要な再レンダリングを防ぐ\n    - _Leverage: Supabase Postgres FTS, React Suspense/Streaming UI\n    - _Requirements: REQ-005\n    - Success: 検索結果とタグインサイトが表示され、UX KPIを満たす\n    - Instructions: tasks.mdの当該行を開始時に`- [ ]`→`- [-]`、完了時に`- [x]`へ更新すること\n\n- [ ] TASK-007 RSS Edge Functionと承認UI\n  - 対応要件: REQ-003\n  - 対応ファイル/モジュール: `supabase/functions/rss-fetch/index.ts`, `supabase/functions/_shared/open-graph.ts`, `app/(dashboard)/rss/page.tsx`, `app/api/rss/approve/route.ts`\n  - 作業内容:\n    - Supabase Edge FunctionでRSSを取得し、要約・タグ推定を行う\n    - 定期スケジューラ設定用のREADMEガイドを追加\n    - 承認キューUIとAPIでpending記事を公開\n  - 完了条件: Edge Functionがローカル検証に通り、UI/承認APIから投稿化できる\n  - _Prompt:\n    - Role: サーバレスエンジニア（Supabase Edge Functions）\n    - Task: Implement the task for spec engineering-knowledge-sharing, first run spec-workflow-guide to get the workflow guide then implement the task: RSS取り込みEdge Functionを実装し、承認UIと連携させる\n    - Restrictions: 無料枠時間制限を考慮した実装、外部ライブラリのサイズを抑える\n    - _Leverage: Supabase Edge Functionsドキュメント, Open Graphメタ抽出コード\n    - _Requirements: REQ-003\n    - Success: 定期実行で記事がpending登録され、承認後に投稿へ変換\n    - Instructions: tasks.mdの当該行を開始時に`- [ ]`→`- [-]`、完了時に`- [x]`へ更新すること\n\n- [ ] TASK-008 Slack即時通知と週次ダイジェスト\n  - 対応要件: REQ-004\n  - 対応ファイル/モジュール: `lib/slack/client.ts`, `supabase/functions/slack-digest/index.ts`, `app/api/notifications/queue/route.ts`\n  - 作業内容:\n    - 投稿保存時の即時通知を送るSlackクライアントユーティリティを実装\n    - Supabase Edge Functionで週次ダイジェストを生成し送信\n    - 通知サプレッション設定を反映\n  - 完了条件: 即時通知と週次ダイジェストのテスト送信が成功\n  - _Prompt:\n    - Role: バックエンドエンジニア（通知基盤）\n    - Task: Implement the task for spec engineering-knowledge-sharing, first run spec-workflow-guide to get the workflow guide then implement the task: Slack通知ユーティリティと週次ダイジェストEdge Functionを実装する\n    - Restrictions: Slackトークンを守る、再送時は重複を避ける\n    - _Leverage: Slack Web API, Supabase Scheduler\n    - _Requirements: REQ-004\n    - Success: テスト用Slackチャンネルで通知・ダイジェストが確認できる\n    - Instructions: tasks.mdの当該行を開始時に`- [ ]`→`- [-]`、完了時に`- [x]`へ更新すること\n\n- [ ] TASK-009 分析指標と監査ログの実装\n  - 対応要件: 分析指標/非機能（運用）\n  - 対応ファイル/モジュール: `lib/analytics/eventLogger.ts`, `supabase/migrations/20250927_audit.sql`, `app/api/metrics/route.ts`\n  - 作業内容:\n    - 投稿/コメント/カード作成時のイベントログを記録\n    - 週次アクティブユーザーなどの集計ビューを作成\n    - 監査ログクエリ用APIを実装\n  - 完了条件: 指標クエリがSupabase上で動作し、APIがJSONで返却\n  - _Prompt:\n    - Role: データエンジニア（イベント計測）\n    - Task: Implement the task for spec engineering-knowledge-sharing, first run spec-workflow-guide to get the workflow guide then implement the task: KPI計測イベントと監査ログを設計・実装する\n    - Restrictions: 個人情報を記録しない、クエリ性能に注意\n    - _Leverage: Supabase Logflare連携, Postgresビュー\n    - _Requirements: 分析指標, 非機能（運用）\n    - Success: KPIダッシュボード向けデータが取得でき、監査ログが90日以上保持\n    - Instructions: tasks.mdの当該行を開始時に`- [ ]`→`- [-]`、完了時に`- [x]`へ更新すること\n\n- [ ] TASK-010 テスト戦略実装（ユニット/E2E）\n  - 対応要件: 全要件（品質保証）\n  - 対応ファイル/モジュール: `tests/unit/*.test.ts`, `tests/e2e/*.spec.ts`, `playwright.config.ts`\n  - 作業内容:\n    - 投稿/コメント/検索/通知のユニットテストを作成\n    - Playwrightで主要ユーザージャーニーのE2Eテストを整備\n    - GitHub Actionsでテストを自動実行するワークフローを追加\n  - 完了条件: `npm run test` と `npm run test:e2e` が成功し、CIがグリーン\n  - _Prompt:\n    - Role: QAオートメーションエンジニア\n    - Task: Implement the task for spec engineering-knowledge-sharing, first run spec-workflow-guide to get the workflow guide then implement the task: 単体テストとE2Eテストを実装し、CIで自動実行されるよう設定する\n    - Restrictions: 外部依存はモック化、CIで環境変数を安全に扱う\n    - _Leverage: Testing Library, Playwright, GitHub Actionsテンプレート\n    - _Requirements: 全要件（品質保証）\n    - Success: テストが高いカバレッジで安定動作し、CIがパス\n    - Instructions: tasks.mdの当該行を開始時に`- [ ]`→`- [-]`、完了時に`- [x]`へ更新すること\n",
  "fileStats": {
    "size": 13862,
    "lines": 172,
    "lastModified": "2025-09-27T07:43:59.487Z"
  },
  "comments": []
}