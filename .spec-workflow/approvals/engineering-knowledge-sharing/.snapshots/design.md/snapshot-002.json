{
  "id": "snapshot_1758958818642_3ofpmuwmb",
  "approvalId": "approval_1758958698988_xtl3dduwm",
  "approvalTitle": "engineering-knowledge-sharing design v2",
  "version": 2,
  "timestamp": "2025-09-27T07:40:18.642Z",
  "trigger": "approved",
  "status": "pending",
  "content": "# engineering-knowledge-sharing 設計書\n\n## 1. 概要\nPdEエンジニア向けナレッジ共有Webサービスの技術設計。ミニマムかつ無料枠を優先し、Next.js（Vercel Hobbyプラン）とSupabase Free Tierを基盤として、コメント付き投稿、ディスカッション、RSS取り込み、Slack通知を実現する。\n\n## 2. コンテキスト\n- 利用ステークホルダー: PdEエンジニア、PdEマネージャー/EM、PdEナレッジマネジメント担当\n- 既存システムとの関係: Google WorkspaceによるSSO、Slackワークスペース連携\n- 技術的制約: 招待制＋ドメイン制限で社内エンジニアのみアクセス可。VPN不要、ゼロトラスト前提。\n\n## 3. 要件対応表\n| 要件ID | 設計要素 | 実装概要 |\n|--------|----------|----------|\n| REQ-001 | コメント付き投稿作成 | Next.js App Router + Supabase Auth、Rich Textエディタ、Slack通知設定モーダル |\n| REQ-002 | ディスカッションとナレッジ蓄積 | Supabase RLS付きコメントテーブル、階層コメントUI、ナレッジカード生成機能 |\n| REQ-003 | RSS取り込み | Supabase Edge Functions + Scheduler、RSS解析、承認キュー |\n| REQ-004 | Slack通知 | Slack Incoming Webhook/ボット、週次ダイジェスト生成Edge Function |\n| REQ-005 | ナレッジ検索 | Supabase Postgres Full Text Search、タグ・期間フィルタUI |\n\n## 4. システムアーキテクチャ\n- フロントエンド: Next.js 14 (App Router) + TypeScript + Tailwind CSS\n- ホスティング: Vercel Hobbyプラン（無料）\n- 認証/バックエンド: Supabase (Postgres, Auth, Edge Functions, Storage)\n- 通知: Slack Web API / Incoming Webhook\n- ビルド/インフラ: GitHub → Vercelデプロイ連携\n\n```\n利用者 -> (ブラウザ) -> Vercel上のNext.js -> Supabase Auth/DB\n                               |-> Slack API\n                               |-> Supabase Edge Functions (RSS/ダイジェスト)\n```\n\n### 設計方針\n- App RouterでAPI Routesを最小限利用、重い処理はEdge Functionsへ委任\n- Supabase Authの`allowed_email_domains`で社内ドメイン制限、招待制でさらに限定\n- Row Level Security (RLS) を用いたユーザー毎のアクセス制御\n- 無料枠内で収まるようCronは15分〜1時間間隔に調整\n\n## 5. ドメインモデル\n- User: Supabase Authユーザー情報（role: engineer, manager, moderator）\n- Post: 記事リンク、本文コメント、タグ、Slack通知設定\n- Comment: Postとのリレーション、階層構造、メンション\n- KnowledgeCard: 議論要約、参照投稿、作成者\n- Tag: タグ名、説明、利用回数\n- RSSFeed: フィード設定、タグプリセット、最終取得日時\n- RSSItem: 取得済み記事、承認ステータス、提案タグ\n- SlackNotificationSetting: 通知チャンネル、サプレッション設定\n\n## 6. ユースケース / フロー\n### 投稿作成フロー\n1. ユーザーがSSOでログイン（Supabase Auth）\n2. 投稿ページでURL/コメント/タグを入力\n3. Supabase APIで投稿を保存、サマリー生成（Edge Function or 前段ライブラリ）\n4. Slack通知設定モーダルでチャンネルを選択\n5. Slack Webhookに通知送信\n\n### RSS承認フロー\n1. ナレッジ担当がRSSフィードを登録\n2. Supabase Scheduler → Edge Functionが定期実行\n3. 新着記事を解析し、サマリー・タグ候補生成\n4. `rss_items`テーブルの`status = pending`として保存\n5. 管理UIで承認→`posts`に変換し公開\n\n### 週次ダイジェストフロー\n1. Schedulerが週1でEdge Functionを起動\n2. 直近投稿を集計し、ランキングと未読数を生成\n3. Slack Webhookにまとめを送信\n\n## 7. UI/UX ラフ案\n- ダッシュボード: 投稿一覧カード、タグフィルタ、未読バッジ\n- 投稿詳細: 記事プレビュー、コメントツリー、関連タグ\n- 投稿作成: リッチエディタ（Blocknote等）、タグピッカー、Slack通知設定\n- 管理画面: RSS承認キュー、タグ管理、Slack設定\n\n## 8. データ設計\n### テーブル概要\n- `profiles`: Supabase Authの拡張（role, team, invited_at）\n- `posts`: 投稿本体（title, url, content, author_id, notified_channels）\n- `post_tags`: 投稿とタグの多対多\n- `comments`: 階層コメント（parent_id）\n- `knowledge_cards`: 要約カード（post_id, summary, created_by）\n- `rss_feeds`: RSS設定（name, url, tags, is_active, last_fetched_at）\n- `rss_items`: 取得記事（feed_id, title, summary, status）\n- `slack_channels`: 利用可能な通知先（name, webhook_url, suppressed_hours）\n\nRow Level Securityポリシー例:\n```sql\ncreate policy \"profiles can view own\" on profiles\n  for select using (auth.uid() = id);\n\ncreate policy \"posts readable by authenticated\" on posts\n  for select using (auth.role() = 'authenticated');\n```\n\n## 9. インテグレーション/外部サービス\n- Supabase Auth: Google Workspace OAuth、ドメイン制限、メール招待\n- Supabase Storage: 画像等の添付（無料枠1GB）\n- Supabase Edge Functions: RSS取得、サマリー生成、Slackダイジェスト\n- Slack: Incoming Webhookで通知、必要に応じてBot Tokenでリッチメッセージ\n- Vercel: GitHub連携によるCI/CD、環境変数でAPIキー管理\n\n## 10. セキュリティ・運用\n- SSO必須、MFAはWorkspaceポリシーで強制\n- 招待メール送付後に初回ログインを許可\n- Supabase RLSでロールベースアクセス制御\n- HTTPS (Vercel / Supabase標準)\n- Edge Functionの失敗時はSlack #infra にエラーログ送信\n- バックアップ: Supabaseの自動バックアップ（7日） + 必要に応じて`pg_dump`\n\n## 11. 非機能要件対応\n- パフォーマンス: ISR/SSGで初期表示を高速化、Full Text Searchで検索1秒以内\n- 可用性: 無料枠内のSLA。重大障害時は復旧手順をNotionで共有\n- スケーラビリティ: アクセス増加時はSupabase有償プラン/Vercel Pro移行を検討\n- コスト管理: 無料枠モニタリング、上限逼迫時に通知\n\n## 12. テスト戦略\n- 単体テスト: Next.jsコンポーネント（Vitest/Testing Library）、Supabase RPC\n- 統合テスト: 投稿→コメント→通知の一連のフロー（Playwright）\n- Edge Functionテスト: RSS取得・Slack送信をモックで検証\n- スモークテスト: デプロイ後に主要画面表示と通知APIをチェック\n\n## 13. オープンな課題\n- Supabase Auth招待フローのUX改善（リマインドメール）\n- 無料枠での監視強化（サードパーティモニタリング検討）\n- 将来的な全文検索強化（有償Elastic導入タイミング）\n- モバイルファーストのUI最適化範囲\n",
  "fileStats": {
    "size": 6852,
    "lines": 127,
    "lastModified": "2025-09-27T07:39:35.440Z"
  },
  "comments": []
}